cmake_minimum_required(VERSION 3.18)
project("OpenGL Tutorial")

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)
set(CMAKE_CXX_EXTENSIONS OFF)

set(CMAKE_C_STANDARD 99)
set(CMAKE_C_STANDARD_REQUIRED TRUE)
set(CMAKE_C_EXTENSIONS OFF)

set(GNU_COMMON_WARNINGS "-Wall -Wextra -Wshadow -Wdouble-promotion -Wrestrict -Wconversion -Wsign-conversion -Wpedantic")
set(GNU_C_WARNINGS "${GNU_COMMON_WARNINGS} -Wjump-misses-init")
set(GNU_CXX_WARNINGS "${GNU_COMMON_WARNINGS} -Wold-style-cast")
set(GNU_FLAGS_DEBUG "-g -Og")
if(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
    set(GNU_FLAGS_DEBUG "${GNU_FLAGS_DEBUG} -fsanitize=address -fsanitize=undefined")
endif()
set(GNU_FLAGS_RELEASE "-O3 -DNDEBUG")
set(GNU_C_FLAGS_DEBUG "${GNU_C_WARNINGS} ${GNU_FLAGS_DEBUG}")
set(GNU_C_FLAGS_RELEASE "${GNU_C_WARNINGS} ${GNU_FLAGS_RELEASE}")
set(GNU_CXX_FLAGS_DEBUG "${GNU_CXX_WARNINGS} ${GNU_FLAGS_DEBUG}")
set(GNU_CXX_FLAGS_RELEASE "${GNU_CXX_WARNINGS} ${GNU_FLAGS_RELEASE}")

set(CLANG_COMMON_WARNINGS "-Wall -Wextra -Wshadow -Wdouble-promotion -Wconversion -Wsign-conversion -Wpedantic")
set(CLANG_C_WARNINGS "${CLANG_COMMON_WARNINGS}")
set(CLANG_CXX_WARNINGS "${CLANG_COMMON_WARNINGS} -Wold-style-cast")
set(CLANG_FLAGS_DEBUG "-g -Og")
if(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
    set(CLANG_FLAGS_DEBUG "${CLANG_FLAGS_DEBUG} -fsanitize=address -fsanitize=undefined")
endif()
set(CLANG_FLAGS_RELEASE "-O3 -DNDEBUG")
set(CLANG_C_FLAGS_DEBUG "${CLANG_C_WARNINGS} ${CLANG_FLAGS_DEBUG}")
set(CLANG_C_FLAGS_RELEASE "${CLANG_C_WARNINGS} ${CLANG_FLAGS_RELEASE}")
set(CLANG_CXX_FLAGS_DEBUG "${CLANG_CXX_WARNINGS} ${CLANG_FLAGS_DEBUG}")
set(CLANG_CXX_FLAGS_RELEASE "${CLANG_CXX_WARNINGS} ${CLANG_FLAGS_RELEASE}")

if (${CMAKE_C_COMPILER_ID} STREQUAL "GNU")
    set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} ${GNU_C_FLAGS_DEBUG}")
    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} ${GNU_C_FLAGS_RELEASE}")
elseif(${CMAKE_C_COMPILER_ID} STREQUAL "Clang")
    set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} ${CLANG_C_FLAGS_DEBUG}")
    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} ${CLANG_C_FLAGS_RELEASE}")
endif()

if (${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${GNU_CXX_FLAGS_DEBUG}")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${GNU_CXX_FLAGS_RELEASE}")
elseif(${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${CLANG_CXX_FLAGS_DEBUG}")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${CLANG_CXX_FLAGS_RELEASE}")
endif()

find_program(GLSLC NAMES glslc REQUIRED)

set(GLSLC_FLAGS_DEBUG "-g")
set(GLSLC_FLAGS_RELEASE "-O")
set(GLSLC_FLAGS "--target-env=opengl --target-spv=spv1.5")
if (${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    set(GLSLC_FLAGS "${GLSLC_FLAGS} ${GLSLC_FLAGS_DEBUG}")
elseif(${CMAKE_BUILD_TYPE} STREQUAL "Release")
    set(GLSLC_FLAGS "${GLSLC_FLAGS} ${GLSLC_FLAGS_RELEASE}")
endif()
separate_arguments(GLSLC_FLAGS NATIVE_COMMAND ${GLSLC_FLAGS})

set(SHADERS_SOURCE_DIR "${CMAKE_SOURCE_DIR}/assets/shaders/src")
set(SHADERS_BINARY_DIR "${CMAKE_SOURCE_DIR}/assets/shaders/bin")

function(add_shader TARGET SHADER)
    set(SHADER_SOURCE_FILE ${SHADERS_SOURCE_DIR}/${SHADER})
    set(SHADER_BINARY_FILE ${SHADERS_BINARY_DIR}/${SHADER}.spv)
    get_filename_component(SHADER_BINARY_DIR ${SHADER_BINARY_FILE} DIRECTORY)
    file(MAKE_DIRECTORY ${SHADER_BINARY_DIR})
    add_custom_command(
        OUTPUT ${SHADER_BINARY_FILE}
        DEPENDS ${SHADER_SOURCE_FILE}
        COMMAND ${GLSLC} ${GLSLC_FLAGS} ${SHADER_SOURCE_FILE} -o ${SHADER_BINARY_FILE}
    )
    target_sources(${TARGET} PRIVATE ${SHADER_BINARY_FILE})
endfunction(add_shader)

find_package(OpenGL REQUIRED)
find_package(glfw3 REQUIRED)
find_package(glm REQUIRED)
find_package(assimp REQUIRED)
find_package(PNG REQUIRED)

project(glad)
add_library(glad SHARED "src/glad.c")
target_include_directories(glad PUBLIC "include/glad")
target_link_libraries(glad PUBLIC OpenGL::GL)
if(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
    target_link_libraries(glad PRIVATE dl)
endif()

project(Camera)
add_library(Camera SHARED "src/Camera.cpp")
target_include_directories(Camera PUBLIC "include")
target_link_libraries(Camera PUBLIC glm)

project(CameraManager)
add_library(CameraManager SHARED "src/CameraManager.cpp")
target_include_directories(CameraManager PUBLIC "include")
target_link_libraries(CameraManager PUBLIC glfw Camera glm)

project(LoadModel)
add_library(LoadModel SHARED "src/load_model.cpp")
target_include_directories(LoadModel PUBLIC "include")
target_link_libraries(LoadModel PUBLIC glad glm PRIVATE assimp)

project(LoadShader)
add_library(LoadShader SHARED "src/load_shader.cpp")
target_include_directories(LoadShader PUBLIC "include")
target_link_libraries(LoadShader PUBLIC glad)

project(LoadTexture)
add_library(LoadTexture SHARED "src/load_texture.cpp")
target_include_directories(LoadTexture PUBLIC "include")
target_link_libraries(LoadTexture PUBLIC glad PRIVATE PNG::PNG)

project(blending)
add_executable(blending "src/blending.cpp")
target_include_directories(blending PRIVATE "include")
target_link_libraries(blending PRIVATE glfw glm glad CameraManager LoadModel LoadShader LoadTexture)
add_shader(blending "blending/diffuse.vert")
add_shader(blending "blending/diffuse.frag")

project(cubemaps)
add_executable(cubemaps "src/cubemaps.cpp")
target_include_directories(cubemaps PRIVATE "include")
target_link_libraries(cubemaps PRIVATE glfw glm glad CameraManager LoadModel LoadShader LoadTexture)
add_shader(cubemaps "cubemaps/skybox.vert")
add_shader(cubemaps "cubemaps/skybox.frag")
add_shader(cubemaps "cubemaps/mirror.vert")
add_shader(cubemaps "cubemaps/mirror.frag")

project(shadows)
add_executable(shadows "src/shadows.cpp")
target_include_directories(shadows PRIVATE "include")
target_link_libraries(shadows PRIVATE glfw glm glad CameraManager LoadModel LoadShader)
add_shader(shadows "shadows/lighting.vert")
add_shader(shadows "shadows/lighting.frag")
add_shader(shadows "shadows/shadow.vert")
add_shader(shadows "shadows/shadow.geom")
add_shader(shadows "shadows/MinMax.comp")
add_shader(shadows "shadows/ZPrepass.frag")

project(instancing)
add_executable(instancing "src/instancing.cpp")
target_include_directories(instancing PRIVATE "include")
target_link_libraries(instancing PRIVATE glfw glm glad CameraManager LoadModel LoadShader)
add_shader(shadows "instancing/diffuse.vert")
add_shader(shadows "instancing/diffuse_instanced.vert")
add_shader(shadows "instancing/diffuse.frag")
