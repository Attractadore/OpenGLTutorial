cmake_minimum_required(VERSION 3.17)
project("OpenGL Tutorial")
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)
find_package(OpenGL REQUIRED)
find_package(glfw3 REQUIRED)
find_package(glm REQUIRED)
find_package(assimp REQUIRED)
find_package(PNG REQUIRED)

project(glad)
add_library(glad SHARED "src/glad.c")
target_include_directories(glad PUBLIC "include/glad" OpenGL)
target_link_libraries(glad PUBLIC OpenGL)
if(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
    target_link_libraries(glad PRIVATE dl)
endif()

project(Camera)
add_library(Camera SHARED "src/Camera.cpp")
target_include_directories(Camera PUBLIC "include" glm)
target_link_libraries(Camera PUBLIC glm)

project(CameraManager)
add_library(CameraManager SHARED "src/CameraManager.cpp")
target_include_directories(CameraManager PUBLIC "include" glfw3 Camera glm)
target_link_libraries(CameraManager PUBLIC glfw Camera glm)

project(LoadModel)
add_library(LoadModel SHARED "src/load_model.cpp")
target_include_directories(LoadModel PUBLIC "include" glad glm PRIVATE assimp)
target_link_libraries(LoadModel PUBLIC glad glm PRIVATE assimp)

project(LoadShader)
add_library(LoadShader SHARED "src/load_shader.cpp")
target_include_directories(LoadShader PUBLIC "include" glad)
target_link_libraries(LoadShader PUBLIC glad)

project(LoadTexture)
add_library(LoadTexture SHARED "src/load_texture.cpp")
target_include_directories(LoadTexture PUBLIC "include" glad PRIVATE PNG)
target_link_libraries(LoadTexture PUBLIC glad PRIVATE png)

project(blending)
add_executable(blending "src/blending.cpp")
target_include_directories(blending PRIVATE "include" glfw3 glm glad)
target_link_libraries(blending PRIVATE glfw glm glad CameraManager LoadModel LoadShader LoadTexture)

project(cubemaps)
add_executable(cubemaps "src/cubemaps.cpp")
target_include_directories(cubemaps PRIVATE "include" glfw3 glm glad)
target_link_libraries(cubemaps PRIVATE glfw glm glad CameraManager LoadModel LoadShader LoadTexture)

project(shadows)
add_executable(shadows "src/shadows.cpp")
target_include_directories(shadows PRIVATE "include" glfw3 glm glad)
target_link_libraries(shadows PRIVATE glfw glm glad CameraManager LoadModel LoadShader)

project(instancing)
add_executable(instancing "src/instancing.cpp")
target_include_directories(instancing PRIVATE "include" glfw3 glm glad)
target_link_libraries(instancing PRIVATE glfw glm glad CameraManager LoadModel LoadShader)
